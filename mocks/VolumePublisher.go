/*
 *
 * Copyright Â© 2021-2022 Dell Inc. or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	csi "github.com/container-storage-interface/spec/lib/go/csi"

	gopowerstore "github.com/dell/gopowerstore"

	mock "github.com/stretchr/testify/mock"
)

// VolumePublisher is an autogenerated mock type for the VolumePublisher type
type VolumePublisher struct {
	mock.Mock
}

// CheckIfVolumeExists provides a mock function with given fields: ctx, client, volID
func (_m *VolumePublisher) CheckIfVolumeExists(ctx context.Context, client gopowerstore.Client, volID string) error {
	ret := _m.Called(ctx, client, volID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, gopowerstore.Client, string) error); ok {
		r0 = rf(ctx, client, volID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, req, client, kubeNodeID, volumeID
func (_m *VolumePublisher) Publish(ctx context.Context, req *csi.ControllerPublishVolumeRequest, client gopowerstore.Client, kubeNodeID string, volumeID string) (*csi.ControllerPublishVolumeResponse, error) {
	ret := _m.Called(ctx, req, client, kubeNodeID, volumeID)

	var r0 *csi.ControllerPublishVolumeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *csi.ControllerPublishVolumeRequest, gopowerstore.Client, string, string) *csi.ControllerPublishVolumeResponse); ok {
		r0 = rf(ctx, req, client, kubeNodeID, volumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.ControllerPublishVolumeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *csi.ControllerPublishVolumeRequest, gopowerstore.Client, string, string) error); ok {
		r1 = rf(ctx, req, client, kubeNodeID, volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
