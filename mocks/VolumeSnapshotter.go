/*
 *
 * Copyright Â© 2021-2022 Dell Inc. or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	controller "github.com/dell/csi-powerstore/v2/pkg/controller"
	gopowerstore "github.com/dell/gopowerstore"

	mock "github.com/stretchr/testify/mock"
)

// VolumeSnapshotter is an autogenerated mock type for the VolumeSnapshotter type
type VolumeSnapshotter struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *VolumeSnapshotter) Create(_a0 context.Context, _a1 string, _a2 string, _a3 gopowerstore.Client) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 gopowerstore.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gopowerstore.Client) gopowerstore.CreateResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, gopowerstore.Client) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExistingSnapshot provides a mock function with given fields: _a0, _a1, _a2
func (_m *VolumeSnapshotter) GetExistingSnapshot(_a0 context.Context, _a1 string, _a2 gopowerstore.Client) (controller.GeneralSnapshot, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 controller.GeneralSnapshot
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.Client) controller.GeneralSnapshot); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(controller.GeneralSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.Client) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
